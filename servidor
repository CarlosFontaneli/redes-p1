#!/usr/bin/env python3

import asyncio
from tcp import Servidor
import re
apelidos_canais_conexoes = {}
apelidos_usados = []


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')

    # Comunicando membros da conexão encerrada
    membros = []
    resposta = b':' + conexao.apelido + b' QUIT :Connection closed' + b'\r\n'

    # Remove de cada canal e adiciona os membros desse para a lista
    for canal in conexao.canais:
        apelidos_canais_conexoes[canal].remove(conexao)
        for membro in apelidos_canais_conexoes[canal]:
            membros.append(membro)

    for membro in set(membros):
        membro.enviar(b':' + conexao.apelido +
                      b' QUIT :Connection closed' + b'\r\n')

    # Removendo o apelido dos registrados no servidor
    if conexao.apelido != b'*':
        del apelidos_canais_conexoes[conexao.apelido.lower()]

    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    # chamada do tratamento do caso 2
    dados = data_treatment(conexao, dados)
    # recebe todos os elementos de dados menos o ultimo (vazio)
    dados = dados[:-1]
    for dado in dados:
        # recebe a primeira palavra da conexao
        comando = dado.split(b' ', 1)[0]

        if comando == b'PING':
            ping(conexao, dado)

        elif comando == b'NICK':
            nick(conexao, dado)

        elif comando == b'PRIVMSG':
            # privatemsg(remetente, destinatario, conteudo)
            print(dados)
            privatemsg(conexao, dado)

    print(conexao, dados)


def data_treatment(conexao, dados):
    if conexao.dados_residuais != b'':
        dados = conexao.dados_residuais + dados
        conexao.dados_residuais = b''

    if b'\n' in dados:
        dados = dados.split(b'\n')
        for i in range(len(dados) - 1):
            dados[i] = dados[i] + b'\n'
        if dados[-1] != b'\n':
            conexao.dados_residuais = dados[-1]
            dados[-1] = b''
    else:
        conexao.dados_residuais = conexao.dados_residuais + dados
        dados = []
    return dados


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

    # Registrando dados vazios
    conexao.dados_residuais = b''
    conexao.apelido = b'*'
    conexao.canais = []


def ping(conexao, dados):
    conexao.enviar(b':server PONG server :' + dados.split(b' ', 1)[1])


def nick(conexao, dados):
    apelido = dados.split(b' ', 1)[1]
    # removendo os caracteres de quebra de linha
    apelido = apelido.split(b'\r\n')[0]
    # Verificando se nome já existe
    if apelido.lower() in apelidos_usados:
        conexao.enviar(b':server 433 ' + conexao.apelido + b' ' +
                       apelido + b' :Nickname is already in use' + b'\r\n')
        return

    if validar_nome(apelido):
        # Troca
        if (conexao.apelido != b'*'):
            apelido_antigo = conexao.apelido.lower()
            del apelidos_canais_conexoes[conexao.apelido.lower()]
            apelidos_canais_conexoes[apelido.lower()] = conexao

            apelidos_usados.remove(apelido_antigo)
            apelidos_usados.append(apelido.lower())

            for canal in conexao.canais:
                canal.troca_apelido_membro(conexao, apelido)

            conexao.apelido = apelido
            conexao.enviar(b':' + apelido_antigo +
                           b' NICK ' + apelido + b'\r\n')
        # Novo
        else:
            apelidos_canais_conexoes[apelido.lower()] = conexao
            conexao.apelido = apelido
            apelidos_usados.append(apelido)
            conexao.enviar(b':server 001 ' + apelido + b' :Welcome' + b'\r\n')
            conexao.enviar(b':server 422 ' + apelido +
                           b' :MOTD File is missing' + b'\r\n')
    # Invalido
    else:
        conexao.enviar(b':server 432 ' + conexao.apelido +
                       b' ' + apelido + b' :Erroneous nickname' + b'\r\n')


def privatemsg(conexao, dados):
    # Recortando os dados recebidos
    # _, destinatario, mensagem = dados.strip(b'\r\n').split(b' ', 2)

    destinatario = dados.strip(b'\r\n').split(b' ')[1]
    mensagem = dados.strip(b'\r\n').split(b' ')[2]
    mensagem = mensagem[1:]

    # procura destinatario
    if destinatario.lower() not in apelidos_usados:
        return

    print()
    print(b':' + conexao.apelido + b' PRIVMSG ' +
          destinatario + b' :' + mensagem + b'\r\n')
    print()
    apelidos_canais_conexoes[destinatario.lower()].enviar(b':' + conexao.apelido + b' PRIVMSG ' +
                                                          destinatario + b' :' + mensagem + b'\r\n')


def join(conexao, dados):
    nome_canal = dados.strip(b'\r\n').split(b' ', 1)[1]
    print(nome_canal)
    # Verificando se o canal tem um nome válido
    if nome_canal[0] != b'#' and not validar_nome(nome_canal[1:]):
        print(b':server 403 ' + nome_canal +
              b' :No such channel' + b'\r\n')
        conexao.enviar(b':server 403 ' + nome_canal +
                       b' :No such channel' + b'\r\n')
        return

    # Criando ou recuperando o canal desejado
    if nome_canal.lower() not in apelidos_usados:
        apelidos_canais_conexoes[nome_canal.lower()] = []
        apelidos_usados.append(nome_canal)
        canal = apelidos_canais_conexoes[nome_canal.lower()]
    else:
        canal = apelidos_canais_conexoes[nome_canal.lower()]
        print('canal antigo')
    conexao.canais.append(nome_canal)
    canal.append(conexao)

    resposta = b':server 353 ' + conexao.apelido + b' = ' + nome_canal + b' :'
    print()
    for membro in canal:
        print(b':' + conexao.apelido +
              b' JOIN :' + nome_canal + b'\r\n')

        membro.enviar(b':' + conexao.apelido +
                      b' JOIN :' + nome_canal + b'\r\n')
        resposta += membro.apelido + b' '

    print(resposta + b'\r\n')
    conexao.enviar(resposta + b'\r\n')
    conexao.enviar(b':server 366 ' + conexao.apelido +
                   b' ' + nome_canal + b' :End of /NAMES list.')


def part(canal, conexao):
    for membro in apelidos_canais_conexoes[canal]:
        resposta = b':' + conexao.apelido + b' PART ' + canal + b'\r\n'
        membro.enviar(resposta)

    apelidos_canais_conexoes[canal].remove(conexao)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
